// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
namespace OctobridgeEF.Models;

public partial class OctobridgeContext
{
    private IOctobridgeContextProcedures _procedures;

    public virtual IOctobridgeContextProcedures Procedures
    {
        get
        {
            if (_procedures is null) _procedures = new OctobridgeContextProcedures(this);
            return _procedures;
        }
        set
        {
            _procedures = value;
        }
    }

    public IOctobridgeContextProcedures GetProcedures()
    {
        return Procedures;
    }
}

public partial class OctobridgeContextProcedures : IOctobridgeContextProcedures
{
    private readonly OctobridgeContext _context;

    public OctobridgeContextProcedures(OctobridgeContext context)
    {
        _context = context;
    }

    public virtual async Task<int> AddAttachmentAsync(string filename, string filetype, long? filelength, byte[] filedata, OutputParameter<int?> id, OutputParameter<DateTime?> dt, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterId = new SqlParameter
        {
            ParameterName = "Id",
            Direction = System.Data.ParameterDirection.InputOutput,
            Value = id?._value ?? Convert.DBNull,
            SqlDbType = System.Data.SqlDbType.Int,
        };
        var parameterdt = new SqlParameter
        {
            ParameterName = "dt",
            Scale = 7,
            Direction = System.Data.ParameterDirection.InputOutput,
            Value = dt?._value ?? Convert.DBNull,
            SqlDbType = System.Data.SqlDbType.DateTime2,
        };
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "filename",
                Size = 510,
                Value = filename ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "filetype",
                Size = 200,
                Value = filetype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "filelength",
                Value = filelength ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            },
            new SqlParameter
            {
                ParameterName = "filedata",
                Size = -1,
                Value = filedata ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            },
            parameterId,
            parameterdt,
            parameterreturnValue,
        };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AddAttachment] @filename = @filename, @filetype = @filetype, @filelength = @filelength, @filedata = @filedata, @Id = @Id OUTPUT, @dt = @dt OUTPUT", sqlParameters, cancellationToken);

        id?.SetValue(parameterId.Value);
        dt?.SetValue(parameterdt.Value);
        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<int> AddCustomerAsync(string firstName, string lastName, string middleName, string addressLine1, string addressLine2, string city, string postalCode, string telephone, string email, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "FirstName",
                Size = 200,
                Value = firstName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "LastName",
                Size = 200,
                Value = lastName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "MiddleName",
                Size = 100,
                Value = middleName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "AddressLine1",
                Size = 120,
                Value = addressLine1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "AddressLine2",
                Size = 120,
                Value = addressLine2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "City",
                Size = 60,
                Value = city ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "PostalCode",
                Size = 30,
                Value = postalCode ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "Telephone",
                Size = 50,
                Value = telephone ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "Email",
                Size = 50,
                Value = email ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            parameterreturnValue,
        };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AddCustomer] @FirstName = @FirstName, @LastName = @LastName, @MiddleName = @MiddleName, @AddressLine1 = @AddressLine1, @AddressLine2 = @AddressLine2, @City = @City, @PostalCode = @PostalCode, @Telephone = @Telephone, @Email = @Email", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<int> AddOrderAsync(string orderStatus, int? customerId, decimal? freightAmount, decimal? subTotal, decimal? totalDue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "OrderStatus",
                Size = 100,
                Value = orderStatus ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "CustomerId",
                Value = customerId ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "FreightAmount",
                Precision = 19,
                Scale = 4,
                Value = freightAmount ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            },
            new SqlParameter
            {
                ParameterName = "SubTotal",
                Precision = 19,
                Scale = 4,
                Value = subTotal ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            },
            new SqlParameter
            {
                ParameterName = "TotalDue",
                Precision = 19,
                Scale = 4,
                Value = totalDue ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            },
            parameterreturnValue,
        };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AddOrder] @OrderStatus = @OrderStatus, @CustomerId = @CustomerId, @FreightAmount = @FreightAmount, @SubTotal = @SubTotal, @TotalDue = @TotalDue", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<int> AddProductAsync(string name, string productNumber, int? productCategoryId, decimal? cost, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "Name",
                Size = 200,
                Value = name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "ProductNumber",
                Size = 200,
                Value = productNumber ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "ProductCategoryId",
                Value = productCategoryId ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "Cost",
                Precision = 19,
                Scale = 4,
                Value = cost ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            },
            parameterreturnValue,
        };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AddProduct] @Name = @Name, @ProductNumber = @ProductNumber, @ProductCategoryId = @ProductCategoryId, @Cost = @Cost", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<int> DeleteAttachmentByIdAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "Id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteAttachmentById] @Id = @Id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<int> DeleteCustomerByIdAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "Id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteCustomerById] @Id = @Id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<int> DeleteOrderByIdAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "Id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteOrderById] @Id = @Id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<int> DeleteProductByIdAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "Id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteProductById] @Id = @Id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<List<GetAttachmentDataResult>> GetAttachmentDataAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryAsync<GetAttachmentDataResult>("EXEC @returnValue = [dbo].[GetAttachmentData] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<List<GetAttachmentsByNameResult>> GetAttachmentsByNameAsync(string filename, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "filename",
                Size = 510,
                Value = filename ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryAsync<GetAttachmentsByNameResult>("EXEC @returnValue = [dbo].[GetAttachmentsByName] @filename = @filename", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<List<GetCustomersByNameResult>> GetCustomersByNameAsync(string lastName, string firstName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "lastName",
                Size = 200,
                Value = lastName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "firstName",
                Size = 200,
                Value = firstName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryAsync<GetCustomersByNameResult>("EXEC @returnValue = [dbo].[GetCustomersByName] @lastName = @lastName, @firstName = @firstName", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<List<GetOrderDetailsByOrderIdResult>> GetOrderDetailsByOrderIdAsync(int? orderId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "orderId",
                Value = orderId ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryAsync<GetOrderDetailsByOrderIdResult>("EXEC @returnValue = [dbo].[GetOrderDetailsByOrderId] @orderId = @orderId", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<List<GetProductByIdResult>> GetProductByIdAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryAsync<GetProductByIdResult>("EXEC @returnValue = [dbo].[GetProductById] @id = @id", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<List<GetProductsByNameNumberResult>> GetProductsByNameNumberAsync(string name, string productNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "name",
                Size = 200,
                Value = name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "productNumber",
                Size = 100,
                Value = productNumber ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryAsync<GetProductsByNameNumberResult>("EXEC @returnValue = [dbo].[GetProductsByNameNumber] @name = @name, @productNumber = @productNumber", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<List<UpdateCustomerByIDResult>> UpdateCustomerByIDAsync(int? id, string firstName, string lastName, string middleName, string addressLine1, string addressLine2, string city, string postalCode, string telephone, string email, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "Id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "FirstName",
                Size = 200,
                Value = firstName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "LastName",
                Size = 200,
                Value = lastName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "MiddleName",
                Size = 100,
                Value = middleName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "AddressLine1",
                Size = 120,
                Value = addressLine1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "AddressLine2",
                Size = 120,
                Value = addressLine2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "City",
                Size = 60,
                Value = city ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "PostalCode",
                Size = 30,
                Value = postalCode ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "Telephone",
                Size = 50,
                Value = telephone ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "Email",
                Size = 50,
                Value = email ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryAsync<UpdateCustomerByIDResult>("EXEC @returnValue = [dbo].[UpdateCustomerByID] @Id = @Id, @FirstName = @FirstName, @LastName = @LastName, @MiddleName = @MiddleName, @AddressLine1 = @AddressLine1, @AddressLine2 = @AddressLine2, @City = @City, @PostalCode = @PostalCode, @Telephone = @Telephone, @Email = @Email", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<List<UpdateOrderByIDResult>> UpdateOrderByIDAsync(int? id, string orderStatus, DateTime? orderDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "Id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "OrderStatus",
                Size = 100,
                Value = orderStatus ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "OrderDate",
                Scale = 7,
                Value = orderDate ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime2,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryAsync<UpdateOrderByIDResult>("EXEC @returnValue = [dbo].[UpdateOrderByID] @Id = @Id, @OrderStatus = @OrderStatus, @OrderDate = @OrderDate", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }

    public virtual async Task<List<UpdateProductByIdResult>> UpdateProductByIdAsync(int? productId, string name, string productNumber, int? productCategoryId, decimal? cost, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
    {
        var parameterreturnValue = new SqlParameter
        {
            ParameterName = "returnValue",
            Direction = System.Data.ParameterDirection.Output,
            SqlDbType = System.Data.SqlDbType.Int,
        };

        var sqlParameters = new []
        {
            new SqlParameter
            {
                ParameterName = "ProductId",
                Value = productId ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "Name",
                Size = 200,
                Value = name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "ProductNumber",
                Size = 100,
                Value = productNumber ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            },
            new SqlParameter
            {
                ParameterName = "ProductCategoryId",
                Value = productCategoryId ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            },
            new SqlParameter
            {
                ParameterName = "Cost",
                Precision = 19,
                Scale = 4,
                Value = cost ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            },
            parameterreturnValue,
        };
        var _ = await _context.SqlQueryAsync<UpdateProductByIdResult>("EXEC @returnValue = [dbo].[UpdateProductById] @ProductId = @ProductId, @Name = @Name, @ProductNumber = @ProductNumber, @ProductCategoryId = @ProductCategoryId, @Cost = @Cost", sqlParameters, cancellationToken);

        returnValue?.SetValue(parameterreturnValue.Value);

        return _;
    }
}
